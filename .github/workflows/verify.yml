name: verify
on:
  push:
    branches:
      - master
  pull_request:
  workflow_dispatch:

jobs:
  # test-linux-cpu:
  #   runs-on: "linux.2xlarge"
  #   steps:
  #     - name: Print runner information
  #       run: cat /etc/os-release
  # test-linux-gpu:
  #   runs-on: "linux.8xlarge.nvidia.gpu"
  #   steps:
  #     - name: Print runner information
  #       run: cat /etc/os-release
  #     - name: Install nvidia-smi
  #       run: |
  #           sudo yum groupinstall -y "Development Tools"
  #           DRIVER_FN="NVIDIA-Linux-x86_64-460.39.run"
  #           wget "https://s3.amazonaws.com/ossci-linux/nvidia_driver/$DRIVER_FN"
  #           sudo /bin/bash "$DRIVER_FN" -s --no-drm || (sudo cat /var/log/nvidia-installer.log && false)
  #           nvidia-smi
  build-win-cpu:
    env:
      BUILD_ENVIRONMENT: "pytorch-win-vs2019-cpu-py3"
      SCCACHE_BUCKET: "ossci-compiler-cache"
      CUDA_VERSION: "cpu"
      PYTHON_VERSION: "3.8"
      VC_VERSION: "16.8.6"
      VC_YEAR: "2019"
      VC_PRODUCT: "BuildTools"
      USE_CUDA: ""
      USE_KINETO: "0"
      TORCH_CUDA_ARCH_LIST: "5.2;7.5"
      JOB_BASE_NAME: test
    runs-on: "windows.2xlarge"
    steps:
      - uses: actions/checkout@v2
      - name: Clone pytorch
        uses: actions/checkout@v2
        with:
          repository: 'pytorch/pytorch'
          ref: 'nightly'
          submodules: 'recursive'
          path: 'pytorch'
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          .\.github\scripts\vs_install.ps1
      - name: Build
        shell: bash
        run: |
          cd pytorch && .jenkins/pytorch/win-build.sh
      # Upload to GitHub so that people can click and download artifacts
      - name: Upload artifacts to Github
        if: always()
        uses: actions/upload-artifact@v2
        # Don't fail on upload to GH since it's only for user convenience
        continue-on-error: true
        with:
          retention-days: 14
          if-no-files-found: error
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\w\build-results
      - name: Upload artifacts to s3
        if: always()
        uses: seemethere/upload-artifact-s3@9d7ceb0ab39c2c88d93ef7792b27425b27d59162
        with:
          retention-days: 14
          if-no-files-found: error
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\w\build-results
  generate-test-matrix:
    runs-on: ubuntu-18.04
    env:
      NUM_TEST_SHARDS: 2
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    container:
      image: python:3.9
    steps:
      - uses: actions/checkout@v2
      - name: Clone pytorch
        uses: actions/checkout@v2
        with:
          repository: 'pytorch/pytorch'
          ref: 'nightly'
          submodules: 'recursive'
          path: 'pytorch'
      - name: Generating test matrix
        id: set-matrix
        run: |
          # outputting for debugging purposes
          MATRIX=$(python ./pytorch/.github/scripts/generate_pytorch_test_matrix.py)
          echo "${MATRIX}"
          echo "::set-output name=matrix::${MATRIX}"
  test:
    runs-on: windows.2xlarge
    env:
      JOB_BASE_NAME: pytorch-win-vs2019-cpu-py3-test
      NUM_TEST_SHARDS: 2
      TEST_CONFIG: ${{ matrix.test_config }}
      VC_VERSION: "16.8.6"
    needs:
      - build-win-cpu
      - generate-test-matrix
    strategy:
      matrix: ${{ fromJson(needs.generate-test-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Clone pytorch
        uses: actions/checkout@v2
        with:
          repository: 'pytorch/pytorch'
          ref: 'nightly'
          submodules: 'recursive'
          path: 'pytorch'
      - name: Clean workspace (including things in .gitignore)
        shell: bash
        run: |
          git clean -xdf
      - name: Install Visual Studio 2019 toolchain
        shell: powershell
        run: |
          .\.github\scripts\vs_install.ps1
      - uses: seemethere/download-artifact-s3@0504774707cbc8603d7dca922e8026eb8bf3b47b
        name: Download PyTorch Build Artifacts
        with:
          name: ${{ env.BUILD_ENVIRONMENT }}
          path: C:\${{ github.run_id }}\build-results
      - name: Check build-results folder
        shell: powershell
        run: |
          tree /F C:\$Env:GITHUB_RUN_ID\build-results
      # Needed for coverage in win-test.sh
      - uses: actions/setup-python@v2
        name: Setup Python3
        with:
          python-version: '3.x'
      - name: Run test scripts
        shell: bash
        env:
          PYTORCH_FINAL_PACKAGE_DIR: /c/${{ github.run_id }}/build-results/
        run: |
            if [[ $NUM_TEST_SHARDS -eq 2 ]]; then
              export SHARD_NUMBER=$TEST_CONFIG
            else
              export SHARD_NUMBER=0
            fi
            if [[ -n $GITHUB_HEAD_REF && "$USE_CUDA" == 1 ]]; then
              export RUN_SMOKE_TESTS_ONLY=1
            fi
            cd pytorch && .jenkins/pytorch/win-test.sh
      - name: Zip test reports for upload
        if: always()
        shell: powershell
        run: |
          # -ir => recursive include all files in pattern
          cd pytorch && 7z a "test-reports-$Env:TEST_CONFIG.zip" -ir'!test\*.xml'
      - uses: actions/upload-artifact@v2
        name: Store PyTorch Test Reports
        if: always()
        with:
          name: test-reports
          retention-days: 14
          if-no-files-found: error
          path:
            test-reports-*.zip
